[Sort Colors]
(https://leetcode.com/problems/sort-colors/)
**Problem Statement:**
Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place 
so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue. 
We use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

**Solution Approach:**
- **One-pass Dutch National Flag algorithm:** 
Use three pointers to sort the array in a single pass. 
This approach has a time complexity of O(n).

----------------------------
75. Sort Colors
Solved
Medium
Topics
Companies
Hint
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
----------------------------
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        red,white,blue=0,0,0
        for e in nums:
            if e == 0:
                red += 1
            elif e == 1:
                white += 1
            else:
                blue += 1
        I = 0
        for K in range(red):
            nums[I]=0
            I+=1
        for K in range(white):
            nums[I]=1
            I+=1
        for K in range(blue):
            nums[I]=2
            I+=1
----------------------------
-- OR --

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        rindex, windex, bindex = 0,0,len(nums)-1

        while windex <= bindex:
            if nums[windex] == 0:
                nums[windex], nums[rindex] = nums[rindex], nums[windex]
                rindex += 1
                windex += 1
            elif nums[windex] == 2:
                nums[windex], nums[bindex] = nums[bindex], nums[windex]
                bindex -= 1
            else:
                windex += 1