Python core 
Python OOP 
DSA - ds:stack, queue
DSA - ds:linked list, SLL, DLL, CLL 
Searching/Sorting algorithms 
Advanced DS 
-- -- -- 
case studies:
    SQL learnings - case studies - mini project 
    Web Technologies - Web Site, Dynamic Web Site 
    Web App Development - python based web application 
-- -- --

Searching algorithms: list/array 
    1. Linear Search : for unsorted list
    2. Binary Search : for sorted list 
    3. Ternary Search : for sorted list 

Sorting algorithms: list/array sortings 
    1. Bubble Sort
    2. Selection Sort 
    3. Insertion Sort 
    4. Quick Sort 
    5. Merge Sort 
    --- --
    6. Heap Sort 

ar = [7 4 3 5 8 10 2 6], N=8 Search Linear, Sortings 
sorted ar = [2 3 4 5 6 7 8 10], N=8 Search Binary / Ternary 

you will form some other datasets to experiment for many test cases. 

--- Linear Search ---
ar = [7 4 3 5 8 10 2 6], N=8, target=2 
1. Sequential Search, from the list every element we do traversal and 
   check the that key/target data is found  

linear search 
    - takes the arguments 
        ar - list/array 
        target - the search element 
    - returns the index of the target element if found 
              -1 if not found 


--- --- 
We define the linear search function.
    lsearch(ar,target) -> index of the target 
    solve() -> read the number of numbers, numbers array, target data 
               call lsearch to find the index of the target data 

python
------------------------------------------
def lsearch(ar,target):
    N=len(ar)
    for I in range(N):
        if ar[I] == target:
            return I 
    return -1

def solve():
    #N=len(ar)#8
    ar = [7, 4, 3, 5, 8, 10, 2, 6]
    target=2
    index = lsearch(ar, target)
    print(index)

solve()
------------------------------------------
Time Complexity of lsearch is: O(N) 




--- Binary Search ---
    only for sorted list 
ar = [2 3 4 5 6 7 8 10], N=8, target=4 
1. traversal to mid element of the list 
   if mid element is target: 
        stop the search 
   otherwise 
        check where is the element 
        if target < mid element:
            search range is reduced to left side of mid element 
        else if target > mid element:
            search range is reduced to right side of mid element 

binary search 
    - takes the arguments 
        ar - list/array 
        target - the search element 
    - returns the index of the target element if found 
              -1 if not found 
      0              7
ar = [2 3 4 5 6 7 8 10], N=8, target=4 
            3
    mid = left+right // 2 => 0 + 7 // 2 => 3
    as mid element is not the target 
    tareget < mid elment ie 4 < 5-> reduce the list as before the mid element 
        right = mid - 1 = 2
      0   2 
ar = [2 3 4]
        1
    mid = 0 + 2 // 2 = 1 
    target is not mid element 
    target not < mid elment ie 4 < 3 False 
    target > mid element id 4 > 3 True 
        left = mid + 1 = 1 + 1 = 2
     2 2 
ar = [4]
    mid = 2 + 2 // 2 = 2 
    as mid elment is the target we stop here the search
        ie we found the index of the target element 
            index for target is 2
     
python : iterative binary search 

def bsearch(ar, target):
    N = len(ar)
    left, right = 0, N-1
    while left <= right: 
        mid = (left + right) // 2 
        if target == ar[mid]:
            return mid # found element index 
        elif target < ar[mid]:
            right = mid = 1
        else:   #target > ar[mid]
            left = mid + 1
    return -1 # not found 


the code had buggy. Fixed bug.
def bsearch(ar, target):
    N = len(ar)
    left, right = 0, N-1
    while left <= right: 
        mid = (left + right) // 2 
        if target == ar[mid]:
            return mid 
        elif target < ar[mid]:
            right = mid - 1
        else:   
            left = mid + 1
    return -1 

#time complexity: O(log N)




--- Ternary Search ---
    only for sorted list 
ar = [2 3 4 5 6 7 8 10], N=8, target=4 
    approach: divide the list into three, [left] [mid] [right]
              similar to the binary search: [left] [right]
    find the middle list. 
      mid1 = left + ((right - left) // 3)   = 0 + (7-0)//3 = 2 
      mid2 = right - ((right - left) // 3)  = 7 - (7-0)//3 = 5
      0=left         7=right 
ar = [2 3 4 5 6 7 8 10]
          2     5
      ----- --- -------
      left  middle right 

#recursive algorithm for ternary search     
def tsearch(ar, target, left, right):
    #base condition #list is empty 
    if left > right: 
        return -1 

    #logic 
    mid1 = left + ((right - left) // 3)    
    mid2 = right - ((right - left) // 3)    

    if target == ar[mid1]:
        return mid1 
    elif target == ar[mid2]:
        return mid2 
    else: 
        #reduce the list either as left, middle, right 
        if target < ar[mid1]: 
            return tsearch(ar, target, left, mid1 - 1) # left list 
        elif target > ar[mid2]:
            return tsearch(ar,taget,mid2+1,right) #right list 
        else:
            return tsearch(ar,taget,mid1+1,mid2-1) #middle list excludes mid1 and mid2 
            

#time complexity: O(log (base 3) N)



------- Sorting Algorithms ---------
--- Bubble Sort ---
    ar = [7 4 3 5 8 10 2 6], N=8 Bubble Sort 

    element and its next element: adjacent elements -> comparison 
        from first element till the element before the last element 
            why? reason: the element will not have the next element 
    
    Step A: element and its next element: adjacent elements -> comparison 
        repeat for all the elements 

        This step is called pass 

        After every pass, we conclude the last element of the taken list is sorted 

        In the comparision, if we found element is greater than the next element,   
            conduct swap bt element and next element.

        In a pass, if you cannot conduct the swap. Meaning: the elements are already sorted.
            Here, if no swap in the last pass, stop the prcoess.
                because elements are sorted. 

    Optimization Rules: 
        1. after every pass reduce the size ie excluded the last element of the taken list
        2. if there is no swap during pass, stop the process. 

ar = [7 4 3 5 8 10 2 6], N=8 Bubble Sort
      = -
ar = [4 7 3 5 8 10 2 6] swap        
        = -
ar = [4 3 7 5 8 10 2 6] swap
          = -
ar = [4 3 5 7 8 10 2 6] swap         
            = -  no swap 
ar = [4 3 5 7 8 10 2 6]              
              = -   no swap
ar = [4 3 5 7 8 10 2 6]             
                =  -  swap 
ar = [4 3 5 7 8 2 10 6]                
                  =  - swap 
ar = [4 3 5 7 8 2 6 10]  here pass is over.
after the first pass, the element 10 takes its position. sorted. 

Next pass we apply the above process only for list less last element 
ar = [4 3 5 7 8 2 6] conduct one more time the pass, if we continue this we will make sure 
the list is sorted.


Attributes/Principles of bubble sort:
    comparison sort 
    swap 
    in-place memory. not using any auxiliary memory for our sorting.

    Time complexity: 
        Best      O(N)      if the elements are sorted already    
        Average   O(N^2)  
        Worst     O(N^2)
    Space complexity: O(1)

Arriving the code for bubble sort: 

python / pseodo code: 

def bsort(ar):
    N = len(ar)

    while True:
        isSwapped = False 
        #pass code 
        for I in range(N-1): # 0 .. N-2 
            if ar[I] > ar[I+1]: #comparison of adj elements 
                ar[I],ar[I+1] = ar[I+1],ar[I] #swap 
                isSwapped = True 
        if not isSwapped:
            break
    # the elements sorted 


Here, outer for loop is not used. Instead we used outer while loop 
to write the better bubble sort code. 



--- Selection Sort ---
    ar = [7 4 3 5 8 10 2 6], N=8 Selection Sort

    Pass 
        select every element and find min element after the element 
        swap the selected element and min element  
    Pass you conduct for every element other than last element 
        Reason: the last element will not have next elements 

    N elements require N-1 passes 
        Each pass you do N-1 comparisons 

    Time complexity: O(N^2) for best, average and worst cases 
    Space complexity: O(1) 

conduct selection sort:
    ar = [7 4 3 5 8 10 2 6], N=8
          =                  min element after the selected element = 2 
    swap the selected element and min element 
    ar = [2 4 3 5 8 10 7 6]
        every time after the pass the selected element will get the position. sorted. 
    ar = [2 4 3 5 8 10 7 6]    
            =                 min=3 
    ar = [2 3 4 5 8 10 7 6]    
              =               min=4, dont do the swap it element and min element indices are same 
    ar = [2 3 4 5 8 10 7 6]
                =             min=5, no swap 
    ar = [2 3 4 5 8 10 7 6]
                  =           min=6, swap 
    ar = [2 3 4 5 6 10 7 8]
                    ==        min=7, swap 
    ar = [2 3 4 5 6 7 10 8] 
                      ==      min=8, swap 
    ar = [2 3 4 5 6 7 8 10]   no more passes. we conduct passes only for elements before last element. 

writing the code         

def ssort(ar):
    N = len(ar)

    for I in range(N-1): #selected element 
        min_index = I 
        for J in range(I+1,N): #compare the selected element with next elements to find min element 
            if ar[J] < ar[min_index]:
                min_index = J
        #swap selected element and min element 
        if min_index != I:  #if selected and min elements are same, no swap [optimized]
            ar[I], ar[min_index] = ar[min_index], ar[I] # swap code 
    # the elements sorted 
















